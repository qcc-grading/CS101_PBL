#!/bin/python3

# Script d'interface entre INGInious et des tests unitaires écrits à l'aide de CUnit
# Auteurs : Mathieu Xhonneux, Anthony Gégo
# Licence : GPLv3

import subprocess, shlex, re, os, yaml
from inginious import feedback, rst, input

# Switch working directory to student/
os.chdir("student")

# Fetch and save the student code into a file for compilation
input.parse_template("student_code.c.tpl", "student_code.cc")

# Compilation
p = subprocess.Popen(shlex.split("make student_code"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
make_output = p.communicate()[0].decode('utf-8')
# If compilation failed, exit with "failed" result
if p.returncode:
    feedback.set_tag("not_compile", True)
    feedback.set_global_result("failed")
    feedback.set_global_feedback("The compilation of your code has failed. Please see the exit message of ``make`` command:")
    feedback.set_global_feedback(rst.get_codeblock('', make_output), True)
    exit(0)
"""
else:
    # Cppcheck
    p = subprocess.Popen(shlex.split("make check"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
    cppcheck_output = p.communicate()[0].decode('utf-8')
    if p.returncode:
        feedback.set_tag("cppcheck", True)
        feedback.set_global_result("failed")
        feedback.set_global_feedback("The compilation of your code with ``cppcheck`` has failed. Please see the exit message of ``make`` command:")
        feedback.set_global_feedback(rst.get_codeblock('', cppcheck_output), True)
        exit(0)
    else:
        feedback.set_global_result("success")
        feedback.set_global_feedback("- Your code compiled.\n")
# Parse banned functions
try:
    banned_funcs = re.findall("BAN_FUNCS\(([a-zA-Z0-9_, ]*)\)", open('tests.c').read())[-1].replace(" ", "").split(",")
    banned_funcs = list(filter(None, banned_funcs))
except IndexError:
    banned_funcs = []

if banned_funcs:
    p = subprocess.Popen(shlex.split("readelf -s student_code.o"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
    readelf_output = p.communicate()[0].decode('utf-8')
    for func in banned_funcs:
        if re.search("UND {}\n".format(func), readelf_output):
            feedback.set_tag("banned_funcs", True)
            feedback.set_global_result("failed")
            feedback.set_global_feedback("You have used the function {}, which is not authorized.".format(func))
            exit(0)

"""
# Remove source files
subprocess.run("rm -rf *.c *.tpl *.h *.o", shell=True)

LANG = input.get_input('@lang')
import pexpect as px
def e2e(name, orders, timeout=5):       
    for order in orders:
        child = px.spawn('./'+name)
        #child.delaybeforesend = 0
        output=''
        # if order is not empty, 
        if order['expect']:
            child.expect(order['expect'])
        if order['send']:
            child.sendline(order['send'])
        retcode = child.expect([px.TIMEOUT, px.EOF],timeout)
        if retcode==0:
            #print("retcode==0")
            return "Failure"
        elif child.after is not None:
            output=''.join(child.before.decode("utf-8").split())
        #print("output:",output)
        if order['check'] == output:
            continue
        else:
            return "Failure"
    return "Success"
    
import random
ri=random.randint(-100,100)
rsend=str(ri)
rcheck=rsend+"Theansweris"+str(ri+1)+"!"

orders=[{'expect':'integer:','send':'5','check':'5Theansweris6!'},{'expect':'integer:','send':'-9','check':'-9Theansweris-8!'},{'expect':'integer:','send':rsend,'check':rcheck}]
result=e2e('student_code',orders)
score = 0
if result == "Success":
    score = 100
else: # Fail
    score = 0

feedback.set_grade(score)
feedback.set_global_result("success" if score >= 50 else "failed")
