#!/bin/python3

# Script d'interface entre INGInious et des tests unitaires écrits à l'aide de CUnit
# Auteurs : Mathieu Xhonneux, Anthony Gégo
# Licence : GPLv3

import subprocess, shlex, re, os, yaml
from inginious import feedback, rst, input

# Switch working directory to student/
os.chdir("student")

# Fetch and save the student code into a file for compilation
input.parse_template("student_code.c.tpl", "student_code.cc")

# Compilation
p = subprocess.Popen(shlex.split("make student_code"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
make_output = p.communicate()[0].decode('utf-8')
# If compilation failed, exit with "failed" result
if p.returncode:
    feedback.set_tag("not_compile", True)
    feedback.set_global_result("failed")
    feedback.set_global_feedback("The compilation of your code has failed. Please see the exit message of ``make`` command:")
    feedback.set_global_feedback(rst.get_codeblock('', make_output), True)
    exit(0)
"""
else:
    # Cppcheck
    p = subprocess.Popen(shlex.split("make check"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
    cppcheck_output = p.communicate()[0].decode('utf-8')
    if p.returncode:
        feedback.set_tag("cppcheck", True)
        feedback.set_global_result("failed")
        feedback.set_global_feedback("The compilation of your code with ``cppcheck`` has failed. Please see the exit message of ``make`` command:")
        feedback.set_global_feedback(rst.get_codeblock('', cppcheck_output), True)
        exit(0)
    else:
        feedback.set_global_result("success")
        feedback.set_global_feedback("- Your code compiled.\n")
# Parse banned functions
try:
    banned_funcs = re.findall("BAN_FUNCS\(([a-zA-Z0-9_, ]*)\)", open('tests.c').read())[-1].replace(" ", "").split(",")
    banned_funcs = list(filter(None, banned_funcs))
except IndexError:
    banned_funcs = []

if banned_funcs:
    p = subprocess.Popen(shlex.split("readelf -s student_code.o"), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
    readelf_output = p.communicate()[0].decode('utf-8')
    for func in banned_funcs:
        if re.search("UND {}\n".format(func), readelf_output):
            feedback.set_tag("banned_funcs", True)
            feedback.set_global_result("failed")
            feedback.set_global_feedback("You have used the function {}, which is not authorized.".format(func))
            exit(0)

"""
# Remove source files
subprocess.run("rm -rf *.c *.tpl *.h *.o", shell=True)

LANG = input.get_input('@lang')

# Run the code in a parallel container
p = subprocess.Popen(shlex.split("run_student --time 20 --hard-time 60 ./student_code LANGUAGE={}".format(LANG)), stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
o, e = p.communicate()
result=o.decode("utf-8")
print(result)
# If run failed, exit with "failed" result
if p.returncode:
    feedback.set_global_result("failed")
    if p.returncode == 256-8:
        montest_output = rst.get_admonition("warning", "**Error during execution**", "Your code has produced an error. Signal SIGFPE sends : *Floating Point Exception*.")
        feedback.set_tag("sigfpe", True)
    elif p.returncode == 256-11:
        montest_output = rst.get_admonition("warning", "**Error during execution**", "Your code has produced an error. Signal SIGSEGV sends : *Segmentation Fault*.")
    elif p.returncode == 252:
        montest_output = rst.get_admonition("warning", "**Error during execution**", "Your code tried to allocate more memory than available.")
        feedback.set_tag("memory", True)
    elif p.returncode == 253:
        montest_output = rst.get_admonition("warning", "**Error during execution**", "Your code has taken too much time to execute.")
    else:
        montest_output = rst.get_admonition("warning", "**Error during execution**", "Your code produced an error.")
    feedback.set_global_feedback(rst.indent_block(2, montest_output, " "), True)
    exit(0)
#elif run_output:   
#    feedback.set_global_feedback("- Sortie de votre méthode de test:\n" + rst.indent_block(2, rst.get_codeblock('', run_output), " "), True)

# Comment to run the tests
#feedback.set_global_feedback("- **Cette note n'est pas finale.** Une série de tests sera exécutée sur votre code après l'examen.\n", True)
#exit(0)

score = 0
if result == "Success":
    score = 100
else: # Fail
    score = 0

feedback.set_grade(score)
feedback.set_global_result("success" if score >= 50 else "failed")
