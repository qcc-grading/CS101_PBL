accessible: true
author: KWANG KIM
context: |
    We want to make a Class Roster program which save the today's attendance records of CS101 students. To allow a **dynamic** roster, we will use :code:`vector` types for names of students and their attendance records.

    For the names of students, we use :code:`names` *vector*.

    .. code-block:: c++

        vector<string> names;

    For the today's attendance records, we use
    :code:`attendances` *vector*.

    .. code-block:: c++

        vector<char> attendances;

    Here we use the character **P** as the presence, **L** as the lateness, **A** as the absence, and **E** as the excuse.

    :code:`names` and :code:`attendances` are related by the **index**. For example, if

    .. code-block:: c++

        names[3]="Henry";
        atttendances[3]='L';

    , the 4th student, Henry was late today. (The index starts with 0.)

    Therefore the sizes of :code:`names` and :code:`attendances` should be exactly same.

environment: e2e
evaluate: best
groups: false
input_random: '2'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: 42. Class Roster
network_grading: false
order: 10
problems:
    setup:
        default: ''
        name: setup code
        language: cpp
        type: code
        header: |-
            Make a :code:`void setup(vector<string>& names, vector<char>& attendances)` which saves names and attendance records of students.

            Please, check the following screenshot.
            
            .. code-block:: bash

                Type the name of student:James
                Type the record of attendances:L
                Do you want to add more students?(y/n):y
                Type the name of student:Curry
                Type the record of attendances:E
                Do you want to add more students?(y/n):n
                            
            Do not forget `{ }`.

            .. code-block:: c++

                void setup(vector<string>& names, vector<char>& attendances)

     count:
        default: ''
        name: setup code
        language: cpp
        type: code
        header: |-
            Make a :code:`int count(const vector<char>& attendances, char att)` which returns the number of attendance records for :code:`att`.

            For example,
                      
            .. code-block:: bash

                cout<<count(attendances,'L');

            will print the number of present students.

            .. code-block:: bash

                cout<<count(attendances,'A');
            
            will print the number of absent students.

            Do not forget `{ }`.

            .. code-block:: c++

               int count(const vector<char>& attendances, char att)   

stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        description: Your code exceeds the maximum allowed time.
        id: timeout
        visible: true
        name: Timeout
        type: 1
    '1':
        description: ''
        id: sigsegv
        visible: true
        name: Segmentation Fault
        type: 1
    '2':
        id: not_compile
        type: 1
        name: Not compile
        visible: true
        description: You code does not compile.
    '3':
        type: 1
        id: memory
        name: Memory Exceeded
        description: ''
        visible: true
    '4':
        type: 1
        visible: true
        id: sigfpe
        description: ''
        name: Floating Point Exception
    '5':
        id: double_free
        description: Your code produced a double free.
        visible: true
        type: 1
        name: Double free
    '6':
        visible: true
        name: Banned functions
        type: 1
        id: banned_funcs
        description: You use some banned functions.
    '8':
        id: cppcheck
        visible: true
        description: Your code does not compile with cppcheck
        type: 1
        name: Cppcheck fails
    '7':
        type: 2
        visible: true
        description: ''
        name: S1
        id: ''
weight: 1.0
