accessible: true
author: KWANG KIM
context: |
    We want to make a Class Roster program which save the today's attendance records of CS101 students. To allow a **dynamic** roster, we will use :code:`vector` types for names of students and their attendance records.

    For the names of students, we use :code:`names` *vector*.

    .. code-block:: cpp

        vector<string> names;

    For the today's attendance records, we use
    :code:`attendances` *vector*.

    .. code-block:: cpp

        vector<char> attendances;

    Here we use the character **P** as the presence, **L** as the lateness, **A** as the absence, and **E** as the excuse.

    :code:`names` and :code:`attendances` are related by the **index**. For example, if

    .. code-block:: cpp

        names[3]="Henry";
        atttendances[3]='L';

    , the 4th student, Henry was late today. (The index starts with 0.)

    Therefore the sizes of :code:`names` and :code:`attendances` should be exactly same.

environment: e2e
evaluate: best
groups: false
input_random: '2'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: 42. Class Roster
network_grading: false
order: 10
problems:
    setup:
        default: ''
        name: Setup the roster and attendance records.
        language: cpp
        type: code
        header: |-
            Make a :code:`void setup(vector<string>& names, vector<char>& attendances)` which saves names and attendance records of students.

            Please, check the following screenshot.
            
            .. code-block:: bash

                Type the name of student:James
                Type the record of attendances:L
                Do you want to add more students?(y/n):y
                Type the name of student:Curry
                Type the record of attendances:E
                Do you want to add more students?(y/n):n
                            
            Do not forget `{ }`.

            .. code-block:: cpp

                void setup(vector<string>& names, vector<char>& attendances)

    count:
        default: ''
        name: Count the attendance.
        language: cpp
        type: code
        header: |-
            Make a :code:`int count(const vector<char>& attendances, char att)` which returns the number of attendance records for :code:`att`.

            For example,
                      
            .. code-block:: cpp

                cout<<count(attendances,'L');

            will print the number of present students.

            .. code-block:: cpp

                cout<<count(attendances,'A');
            
            will print the number of absent students.

            Do not forget `{ }`.

            .. code-block:: cpp

               int count(const vector<char>& attendances, char att)  
    
    MCQcount:
        name: Checkup question for count function.
        type: multiple_choice
        header: |-
            Assume

            .. code-block:: cpp

                vector<string> names={"Bob","Jane","Jim","Lee","Python","Java"};
                vector<char> attendances={'A','P','E','E','A','E'};
            
            . What it the output of the following code?

            .. code-block:: cpp

                cout<<count(attendances,'E');
        error_message: "Count E!"
        success_message: "You are right!"    
        choices:
            - text: '0'
              valid: false
            - text: '1'
              valid: false
            - text: '2'
              valid: false
            - text: '3'
              valid: true
    
    report:
        default: ''
        name: Report the result.
        language: cpp
        type: code
        header: |-
            Make a :code:`void report(const vector<char>& attendances)` which returns the report uing above :code:`count` function.

            For example, if
                      
            .. code-block:: cpp

                vector<string> names={"Bob","Jane","Jim","Lee","Python","Java"};
                vector<char> attendances={'P','A','A','E','A','E'};

            , the following code

            .. code-block:: bash

               report(attendances);

            
            will print the these results.

            .. code-block:: bash

                The number of absent students is 2.
                The number of late students is 0.
                The number of excused students is 2.
                The number of present students is 1.

            Do not forget `{ }`.

            .. code-block:: cpp

               void report(const vector<char>& attendances)

    lsatq:
        type: code
        name: extra questions
        header: Try these questions.
        boxes:
            box1:
                name: box one
                type: text
                content: Help

            box2:
                type: code
                language: cpp

            box3:
                name: box2
                type: text
                content: Some additional text
    ttt:
        type: text
        content: hi
               


              

                




stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        description: Your code exceeds the maximum allowed time.
        id: timeout
        visible: true
        name: Timeout
        type: 1
    '1':
        description: ''
        id: sigsegv
        visible: true
        name: Segmentation Fault
        type: 1
    '2':
        id: not_compile
        type: 1
        name: Not compile
        visible: true
        description: You code does not compile.
    '3':
        type: 1
        id: memory
        name: Memory Exceeded
        description: ''
        visible: true
    '4':
        type: 1
        visible: true
        id: sigfpe
        description: ''
        name: Floating Point Exception
    '5':
        id: double_free
        description: Your code produced a double free.
        visible: true
        type: 1
        name: Double free
    '6':
        visible: true
        name: Banned functions
        type: 1
        id: banned_funcs
        description: You use some banned functions.
    '8':
        id: cppcheck
        visible: true
        description: Your code does not compile with cppcheck
        type: 1
        name: Cppcheck fails
    '7':
        type: 2
        visible: true
        description: ''
        name: S1
        id: ''
weight: 1.0
