accessible: true
author: KWANG KIM
context: |
    We want to make a Class Roster program which save the today's attendance records of CS101 students. To allow a **dynamic** roster, we will use :code:`vector` types for names of students and their attendance records.

    For the names of students, we use :code:`names` *vector*.

    .. code-block:: cpp

        vector<string> names;

    For the today's attendance records, we use
    :code:`attendances` *vector*.

    .. code-block:: cpp

        vector<char> attendances;

    Here we use the character **P** as the presence, **L** as the lateness, **A** as the absence, and **E** as the excuse.

    :code:`names` and :code:`attendances` are related by the **index**. For example, if

    .. code-block:: cpp

        names[3]="Henry";
        atttendances[3]='L';

    , the 4th student, Henry was late today. (The index starts with 0.)

    Therefore the sizes of :code:`names` and :code:`attendances` should be **exactly same**.
    
    In this project, we will make
    
    .. code-block:: cpp

        void add(vector<string>& names, vector<char>& attendances);
        int count(const vector<char>& attendances, char att);
        void report(const vector<char>& attendances);
        void clear(vector<string>& names, vector<char>& attendances);


    **Demo:** With this main function,

    .. code-block:: cpp

            #include<iostream>
            #include<string>
            #include<vector>
            using namespace std;
            void add(vector<string>& names, vector<char>& attendances);
            int count(const vector<char>& attendances, char att);
            void report(const vector<char>& attendances);
            void clear(vector<string>& names, vector<char>& attendances);
            int main(){
                vector<string> names;
                vector<char> attendances;
                string choice="";
                do{
                    cout<<"Attendance Roster"<<endl;
                    cout<<"a. Add new students."<<endl;
                    cout<<"b. Report the attendance."<<endl;
                    cout<<"c. Clear the roster."<<endl;
                    cout<<"d. Stop."<<endl;
                    cout<<"Chooce one of choices(a,b,c,d):";
                    cin>>choice;
                    if(choice=="a")  add(names, attendances);
                    else if(choice=="b") report(attendances);
                    else if(choice=="c") clear(names, attendances);
                }while(choice != "d");
                cout<<"Bye."<<endl;
            }

    
    The following screenshot may give some ideas on this project.

        .. code:: bash

            Attendance Roster
            a. Add new students.
            b. Report the attendance.
            c. Clear the roster.
            d. Stop.
            Chooce one of choices(a,b,c,d):a
            Type the name of student:James
            Type the record of attendances(A,L,E,P):L
            Do you want to add more students?(y/n):y
            Type the name of student:Harden
            Type the record of attendances(A,L,E,P):E
            Do you want to add more students?(y/n):n
            Attendance Roster
            a. Add new students.
            b. Report the attendance.
            c. Clear the roster.
            d. Stop.
            Chooce one of choices(a,b,c,d):b
            The number of absent students is 0.
            The number of late students is 1.
            The number of excused students is 1.
            The number of present students is 0.
            Attendance Roster
            a. Add new students.
            b. Report the attendance.
            c. Clear the roster.
            d. Stop.
            Chooce one of choices(a,b,c,d):a
            Type the name of student:Curry
            Type the record of attendances(A,L,E,P):E
            Do you want to add more students?(y/n):y
            Type the name of student:Thompson
            Type the record of attendances(A,L,E,P):P
            Do you want to add more students?(y/n):n
            Attendance Roster
            a. Add new students.
            b. Report the attendance.
            c. Clear the roster.
            d. Stop.
            Chooce one of choices(a,b,c,d):b
            The number of absent students is 0.
            The number of late students is 1.
            The number of excused students is 2.
            The number of present students is 1.
            Attendance Roster
            a. Add new students.
            b. Report the attendance.
            c. Clear the roster.
            d. Stop.
            Chooce one of choices(a,b,c,d):c
            All of records were cleared.Attendance Roster
            a. Add new students.
            b. Report the attendance.
            c. Clear the roster.
            d. Stop.
            Chooce one of choices(a,b,c,d):b
            There is no student.
            Attendance Roster
            a. Add new students.
            b. Report the attendance.
            c. Clear the roster.
            d. Stop.
            Chooce one of choices(a,b,c,d):d
            Bye.            

environment: e2e
evaluate: best
groups: false
input_random: '2'
limits:
    memory: '100'
    time: '30'
    output: '2'
name: 501. Class Roster
network_grading: false
order: 10
problems:
    setup:
        default: ''
        name: Setup the roster and attendance records.
        language: cpp
        type: code
        header: |-
            Make a :code:`void add(vector<string>& names, vector<char>& attendances)` which **adds** new names and attendance records of students.
            For a simpilicity, we only type **the last name without any space**. 
            
            (So we can still use :code:`cin`). 
            
            We assume that a user type `A`, `L`, `E` and `P` properly.
            Please, check the following screenshot.
            
            .. code-block:: bash

                Type the name of student:James
                Type the record of attendances(A,L,E,P):L
                Do you want to add more students?(y/n):y
                Type the name of student:Curry
                Type the record of attendances(A,L,E,P):E
                Do you want to add more students?(y/n):n
                            
            Do not forget `{ }`.

            .. code-block:: cpp

                void add(vector<string>& names, vector<char>& attendances)

    count:
        default: ''
        name: Count the attendance.
        language: cpp
        type: code
        header: |-
            Make a :code:`int count(const vector<char>& attendances, char att)` which returns the number of attendance records for :code:`att`.

            .. code-block:: bash

                A: absent
                L: late
                E: excused
                P: Present     

            For example,
                      
            .. code-block:: cpp

                cout<<count(attendances,'L');

            will print the number of present students.

            .. code-block:: cpp

                cout<<count(attendances,'A');
            
            will print the number of absent students.

            Do not forget `{ }`.

            .. code-block:: cpp

               int count(const vector<char>& attendances, char att)  
    
    MCQcount:
        name: Checkup question for count function.
        type: multiple_choice
        header: |-
            Assume

            .. code-block:: cpp

                vector<string> names={"Bob","Jane","Jim","Lee","Python","Java"};
                vector<char> attendances={'A','P','E','E','A','E'};
            
            . What it the output of the following code?

            .. code-block:: cpp

                cout<<count(attendances,'E');
        error_message: "Count E!"
        success_message: "You are right!"    
        choices:
            - text: '0'
              valid: false
            - text: '1'
              valid: false
            - text: '2'
              valid: false
            - text: '3'
              valid: true
    
    report:
        default: ''
        name: Report the result.
        language: cpp
        type: code
        header: |-
            Make a :code:`void report(const vector<char>& attendances)` which returns the report uing above :code:`count` function.

            For example, if
                      
            .. code-block:: cpp

                vector<string> names={"Bob","Jane","Jim","Lee","Python","Java"};
                vector<char> attendances={'P','A','A','E','A','E'};

            , the following code

            .. code-block:: bash

               report(attendances);

            
            will print the these results.

            .. code-block:: bash

                The number of absent students is 2.
                The number of late students is 0.
                The number of excused students is 2.
                The number of present students is 1.
            
            If :code:`names` and :code:`attendances` are empty like
                      
            .. code-block:: cpp

                vector<string> names;
                vector<char> attendances;

            , the following code

            .. code-block:: bash

               report(attendances);

            
            will print the this result.

            .. code-block:: bash

                There is no student.

            Do not forget `{ }`.

            .. code-block:: cpp

               void report(const vector<char>& attendances)  
    clear:
        default: ''
        name: Clear the roster.
        language: cpp
        type: code
        header: |-
            Make a :code:`void clear(vector<string>& names, vector<char>& attendances)` which makes :code:`names` and :code:`attendances` empty.
            To make them empty, you may use :code:`clear()`( http://www.cplusplus.com/reference/vector/vector/clear/ ) member function.

            For example, if we run the code below,
                      
            .. code-block:: cpp

                clear(vector<string>& names, vector<char>& attendances);

            ,  it will show

            .. code-block:: cpp

               All of records were cleared.


            Then the following code

            .. code-block:: cpp

               report(attendances);

            
            will print the this result since they are empty.

            .. code-block:: bash

                There is no student.

            Do not forget `{ }`.

            .. code-block:: cpp

               void clear(vector<string>& names, vector<char>& attendances)

stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags:
    '0':
        description: Your code exceeds the maximum allowed time.
        id: timeout
        visible: true
        name: Timeout
        type: 1
    '1':
        description: ''
        id: sigsegv
        visible: true
        name: Segmentation Fault
        type: 1
    '2':
        id: not_compile
        type: 1
        name: Not compile
        visible: true
        description: You code does not compile.
    '3':
        type: 1
        id: memory
        name: Memory Exceeded
        description: ''
        visible: true
    '4':
        type: 1
        visible: true
        id: sigfpe
        description: ''
        name: Floating Point Exception
    '5':
        id: double_free
        description: Your code produced a double free.
        visible: true
        type: 1
        name: Double free
    '6':
        visible: true
        name: Banned functions
        type: 1
        id: banned_funcs
        description: You use some banned functions.
    '8':
        id: cppcheck
        visible: true
        description: Your code does not compile with cppcheck
        type: 1
        name: Cppcheck fails
    '7':
        type: 2
        visible: true
        description: ''
        name: S1
        id: ''
weight: 1.0
